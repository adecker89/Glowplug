package ${packageName};

import com.adecker.glowplugcompiler.GlowplugAttribute;
import com.adecker.glowplugcompiler.GlowplugEntity;
import com.adecker.glowplugcompiler.GlowplugRelationship;

public class ${className}Entity extends GlowplugEntity{
    public static final String TABLE_NAME = "${tableName}";

    public static class AttributeNames {
    #foreach($field in $fields)
        public static final String ${field.name.toUpperCase()} = "$field.localName";
    #end
    }

    public static enum Attribute {
    #foreach($field in $fields)
        ${field.name.toUpperCase()}(new GlowplugAttribute(TABLE_NAME,"$field.localName","")),
    #end
        ;

        private GlowplugAttribute attr;
        private Attribute(GlowplugAttribute attr) {
            this.attr = attr;
        }

        public GlowplugAttribute getAttribute() {
            return attr;
        }

        public String getFQName() {
            return attr.getFQName();
        }

        public String toString() {
            return attr.getName();
        }
    }

    public ${className}Entity() {
    }

    public GlowplugAttribute[] attributes;
    public GlowplugRelationship[] relationships;

    @Override
    public String getName() {
        return TABLE_NAME;
    }

    @Override
    public String getLocalName() {
        return TABLE_NAME;
    }

    @Override
    public String getRemoteName() {
        return TABLE_NAME;
    }

    @Override
    public GlowplugAttribute[] getAttributes() {
        Attribute[] values = Attribute.values();
        if(attributes == null) {
            attributes = new GlowplugAttribute[values.length];
            for(int i=0;i<values.length;i++) {
                attributes[i] = values[i].getAttribute();
            }
        }

        return attributes;
    }

    @Override
    public GlowplugRelationship[] getRelationships() {
        return new GlowplugRelationship[0];
    }

}