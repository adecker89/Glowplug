package ${packageName};

import android.content.ContentValues;
import android.database.Cursor;
import android.util.JsonReader;

import com.adecker.glowplug.GlowplugAttribute;
import com.adecker.glowplug.GlowplugEntity;
import com.adecker.glowplug.GlowplugRelationship;
import com.adecker.glowplugannotations.GlowplugType;

public class ${className}Entity extends GlowplugEntity{
    public static final String TABLE_NAME = "${tableName}";

    public static class AttributeNames {
#foreach($attr in $attrs)
        public static final String ${attr.name.toUpperCase()} = "$attr.sqliteName";
#end
    }

    public static enum Attribute {
#foreach($attr in $attrs)
        ${attr.name.toUpperCase()}(new GlowplugAttribute(TABLE_NAME,"$attr.name",GlowplugType.$attr.glowplugType)
#if($attr.primaryKey)
            .setPrimaryKey(true,$attr.autoIncrement,"$attr.primaryKeyConflictClause")
#end
#if($attr.remoteName != $attr.name)
            .setRemoteName("$attr.remoteName")
#end
#if($attr.sqliteName != $attr.name)
            .setSqliteName("$attr.sqliteName")
#end
#if(!$attr.sqliteType.isEmpty())
            .setSqliteType("$attr.sqliteType")
#end
#foreach($constraint in $attr.constaints)
            .addConstraint("$constraint")
#end        ),
#end        ;

        private GlowplugAttribute attr;
        private Attribute(GlowplugAttribute attr) {
            this.attr = attr;
        }

        public GlowplugAttribute getAttribute() {
            return attr;
        }

        public String getFQName() {
            return attr.getFQName();
        }

        public String toString() {
            return attr.getName();
        }
    }

    public static class RelationshipNames {
 #foreach($relationship in $relationships)
        public static final String ${relationship.name.toUpperCase()} = "$relationship.sqliteName";
 #end
    }

    public static enum Relationship {
#foreach($relationship in $relationships)
        ${relationship.name.toUpperCase()}(new GlowplugRelationship(TABLE_NAME,"$relationship.sqliteName","$relationship.foreignTable", "$relationship.foreignKey")
#if($relationship.remoteName != $relationship.name)
            .setRemoteName("$relationship.remoteName")
#end
#if($relationship.sqliteName != $relationship.name)
            .setSqliteName("$relationship.sqliteName")
#end        ),
#end        ;

        private GlowplugRelationship relationship;
        private Relationship(GlowplugRelationship relationship) {
            this.relationship = relationship;
        }

        public GlowplugRelationship getRelationship() {
            return relationship;
        }

        public String getFQName() {
            return relationship.getFQName();
        }

        public String toString() {
            return relationship.getName();
        }
    }

    private GlowplugAttribute[] attributes;
    private GlowplugRelationship[] relationships;

    public ${className}Entity() {
        super();
    }

    public ${className}Entity(JsonReader reader) throws IllegalStateException {
        super(reader);
    }

    public ${className}Entity(Cursor cursor, int index) {
        super(cursor,index);
    }

    public ${className}Entity(Cursor cursor, int index, String[] projection) {
        super(cursor,index,projection);
    }

    @Override
    public String getEntityName() {
        return TABLE_NAME;
    }

    @Override
    public String getEntitySqliteName() {
        return TABLE_NAME;
    }

    @Override
    public String getEntityRemoteName() {
        return TABLE_NAME;
    }

    @Override
    public GlowplugAttribute[] getAttributes() {
        Attribute[] values = Attribute.values();
        if(attributes == null) {
            attributes = new GlowplugAttribute[values.length];
            for(int i=0;i<values.length;i++) {
                attributes[i] = values[i].getAttribute();
            }
        }

        return attributes;
    }

    @Override
    public GlowplugRelationship[] getRelationships() {
        Relationship[] values = Relationship.values();
        if(relationships == null) {
            relationships = new GlowplugRelationship[values.length];
            for(int i=0;i<values.length;i++) {
                relationships[i] = values[i].getRelationship();
            }
        }

        return relationships;
    }

#foreach($attr in $attrs)
    public $attr.simpleType get${display.capitalize($attr.name)}() {
        return ($attr.simpleType) getPropertyInternal(Attribute.${attr.name.toUpperCase()}.getAttribute());
    }

    public void set${display.capitalize($attr.name)}($attr.simpleType $attr.name) {
        setPropertyInternal(Attribute.${attr.name.toUpperCase()}.getAttribute(),$attr.name);
    }
#end

#foreach($relationship in $relationships)
    public Long get${display.capitalize($relationship.name)}() {
       return (Long) getPropertyInternal(Relationship.${relationship.name.toUpperCase()}.getRelationship());
    }

    public void set${display.capitalize($relationship.name)}(Long $relationship.name) {
       setPropertyInternal(Relationship.${relationship.name.toUpperCase()}.getRelationship(),$relationship.name);
    }
 #end
}